@model SymCMS.ViewModels.PostViewModel

@{
    ViewBag.Title = "Edit";
    ViewData.Add("PostComments", Model.CommentsEnabled);
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />

        <div class="form-group">
            <hr />
            <input type="file" name="HeadImage" hidden class="file" accept="image/*">
            <div class="input-group my-3">
                <input type="text" class="form-control" disabled placeholder="Click browse to upload image" id="file">
                <div class="input-group-append">
                    <button type="button" class="browse btn btn-primary">Browse...</button>
                </div>
            </div>
            <div class="ml-2 col-md-10">
                <img src="@Html.ValueFor(model => model.HeadImageBase64)" id="previewImage" class="w-100 h-25">
            </div>
            @Html.HiddenFor(model => model.HeadImageBase64)
        </div>

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.Author, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Author, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Author, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10 mb-3">
                @Html.LabelFor(model => model.ContentPreview)
                <textarea name="ContentPreview" onchange="textLimit()">@Html.ValueFor(model => model.ContentPreview)</textarea>
                @Html.ValidationMessageFor(model => model.ContentPreview, "", new { @class = "text-danger" })

            </div>
            <div class="col-md-10">

                @Html.LabelFor(model => model.Content)
                <textarea name="Content">@Html.ValueFor(model => model.Content)</textarea>
                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })

            </div>
            <div class="input-group date m-3">
                <input class="form-control datepicker" id="datePicker" type="text" value="@Html.ValueFor(model => model.Livetime.Date)">
                @Html.HiddenFor(model => model.Livetime)
                @Html.ValidationMessageFor(model => model.Livetime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="switch_box box_1 justify-content-start">
                @Html.LabelFor(model => model.Visible, htmlAttributes: new { @class = "control-label col-md-1" })
                @Html.EditorFor(model => model.Visible, new { htmlAttributes = new { @class = "switch_1 col-md-1 justify-content-start" } })

                <div class="switch_box box_1 justify-content-start">
                    @Html.LabelFor(model => model.CommentsEnabled, htmlAttributes: new { @class = "control-label mr-5 col-md-1" })
                    @Html.EditorFor(model => model.CommentsEnabled, new { htmlAttributes = new { @class = "switch_1 col-md-1 ml-5 justify-content-start" } })
                </div>
            </div>
        </div>


        <div class="input-group mb-2">
            <div class="input-group-prepend">
                <button class="btn btn-outline-secondary run-modal-url" data-url="@Html.Raw(Url.Action("CategorySelectModal", "Admin" ))" type="button">
                    Category
                </button>
                @Html.HiddenFor(model => model.CategoryId, new { htmlAttributes = new { id = "categoryId" } })
                <input class="form-control" disabled id="categoryName" value="@Html.ValueFor(model => model.Category.Name)" />
            </div>
        </div>



        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<div>
    <form action="/Admin/PostsView/">
        <input type="submit" value="Back to List" class="btn btn-outline-dark" />
    </form>
</div>


@section Scripts{

    <script src="https://unpkg.com/gijgo@1.9.13/js/gijgo.min.js" type="text/javascript"></script>
    <link href="https://unpkg.com/gijgo@1.9.13/css/gijgo.min.css" rel="stylesheet" type="text/css" />

    <script>

        $(document).ready(function () {

            CKEDITOR.replace('Content', {
                wordcount: {
                    showParagraphs: false,
                    showWordCount: true,
                    showCharCount: true,
                    countSpacesAsChars: false,
                    countHTML: false,
                    maxWordCount: -1,
                    maxCharCount: -1
                }
            });
            CKEDITOR.replace('ContentPreview', {
                height: 400, 
                wordcount: {
                    showParagraphs: false,
                    showWordCount: true,
                    showCharCount: true,
                    countSpacesAsChars: false,
                    countHTML: false,
                    maxWordCount: -1,
                    maxCharCount: 1000
                },
                toolbar: [
                    { name: 'clipboard', items: ['Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo'] },
                    { name: 'editing', items: ['Find', 'Replace', '-', 'SelectAll', '-', 'Scayt'] },
                    { name: 'forms', items: ['TextField', 'Textarea', 'Select', 'HiddenField'] },
                    '/',
                    { name: 'basicstyles', items: ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'CopyFormatting', 'RemoveFormat'] },
                    { name: 'paragraph', items: ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote', 'CreateDiv', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', '-', 'BidiLtr', 'BidiRtl', 'Language'] },
                    { name: 'links', items: ['Link', 'Unlink', 'Anchor'] },
                    { name: 'insert', items: ['Smiley', 'SpecialChar'] },
                    '/',
                    { name: 'styles', items: ['Styles', 'Format', 'Font', 'FontSize'] },
                    { name: 'colors', items: ['TextColor', 'BGColor'] },
                    { name: 'tools', items: ['Maximize', 'ShowBlocks'] },
                    { name: 'about', items: ['About'] }
                ]
                });

            $('.datepicker').datepicker({
                uiLibrary: 'bootstrap4',
                format: 'dd.mm.yyyy',
            });

            $('.datepicker').change(function () {
                $('#Livetime').val($('#datePicker').val());
            });

            $('.run-modal-url').on('click',
                function () {
                    var url = $(this).data('url');
                    if (url) {
                        if (!$(this).hasClass('run-modal-url-disabled')) {
                            $(this).addClass('run-modal-url-disabled');
                            $('.loading--fullscreen').show();
                            $.ajax({
                                url: url,
                                success: function (data) {
                                    $('.loading--fullscreen').hide();
                                    $('#modalContainer').html(data);
                                    $('#modal-url').modal('show');
                                    $('.run-modal-url').removeClass('run-modal-url-disabled');
                                },
                                fail: function (xhr, textStatus, errorThrown) {
                                    $('.loading--fullscreen').hide();
                                    alert('Error.');
                                    $('.run-modal-url').removeClass('run-modal-url-disabled');
                                }
                            });
                        }

                    }

                });

            $("#createBtn").click(function () {
                if ($("#Title").val() === "" || $("#Content").val() === "") {
                    alert("Field's can not be empty !");
                    return;
                }
            });


            $(document).on("click", ".browse", function () {
                var file = $(this).parents().find(".file");
                file.trigger("click");
            });

            $('input[type="file"]').change(function (e) {
                if (e.target.files[0] == undefined) { return }
                var fileName = e.target.files[0].name;
                $("#file").val(fileName);

                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#HeadImageBase64').val(reader.result);
                    $('#previewImage').removeClass('d-none');
                    document.getElementById("previewImage").src = e.target.result;

                };
                reader.readAsDataURL(this.files[0]);
            });
        });
    </script>

    @Scripts.Render("~/bundles/jqueryval")
}
