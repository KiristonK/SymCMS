@using System.Collections
@using SymCMS.ViewModels
@model CommentViewModel
@{
    bool commentsEnabled;
    string id;
    if (ViewData.ContainsKey("PostComments"))
    {
        commentsEnabled = (bool) ViewData["PostComments"];
        id = "data-postid=" + ViewData["postId"];
    }
    else
    {
        commentsEnabled = (bool) ViewData["Pagecomments"];
        id = "data-pageid=" + ViewData["pageId"];
    }
    if (User.Identity.IsAuthenticated && !ViewData.ContainsKey("partial"))
    {
        <div class="form-group">
            <div class="row justify-content-between">
                <div class="col-4"></div>
                <div class="col-4">
                    <div class="switch_box box_1" style="justify-content: flex-end; position: absolute; right: 0%;">
                        <p class="text-lg-left display-4 text-secondary mr-2">Comments</p>
                        <input type="checkbox" class="switch_1 comment_switch" @id
                               @if (commentsEnabled)
                               {
                                   <text> checked</text>
                               }/>
                    </div>
                </div>
            </div>
        </div>
    }
    if (commentsEnabled)
    {
<div class="form-group">
    @using (Html.BeginForm("Create", "Comment"))
    {
        @Html.ValidationSummary()
        <div class="row justify-content-between">
            <div class="col-4">
                <p class="text-lg-left display-4 text-secondary">New comment</p>
            </div>
        </div>


        if (ViewData.ContainsKey("postId"))
        {
            Model.PostId = int.Parse(ViewData["postId"].ToString());
        }
        else
        {
            Model.PageId = int.Parse(ViewData["pageId"].ToString());
        }


        @Html.HiddenFor(m => m.PostId, new {name="PostId"})
        @Html.HiddenFor(m => m.PageId, new {name = "PageId"})
        @Html.LabelFor(m => m.Author, new {@class = "h3 font-weight-light", name="AuthorLabel"})
        @Html.EditorFor(m => m.Author, new {htmlAttributes = new {@class = "form-control mb-4",name="Author", placeholder = "Enter your name or email"}})
        @Html.LabelFor(m => m.Comment, new {@class = "h3 font-weight-light", name="CommentLabel"})
        @Html.EditorFor(m => m.Comment, new {htmlattributes = new {@class = "form-control mb-4", name="Comment", rows = "5"}})
        <input type="submit" class="btn btn-primary mt-2 mb-2" id="addComment" value="Add comment"/>
    }
</div>
        <div>
            @if (((IEnumerable)ViewBag.ExComments).Cast<CommentViewModel>().ToList().Count != 0)
            {
                <p class="text-lg-left display-4">All comments</p>
                <div class="form-group">
                    @foreach (var item in ViewBag.ExComments)
                    {
                        <div class="form-group position-relative">
                            @Html.EditorFor(m => item)
                        </div>
                        <hr/>
                    }
                </div>
            }
        </div>
    }
}