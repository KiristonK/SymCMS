@model SymCMS.ViewModels.PageViewModels

@{
    ViewBag.Title = "Create";
    // Layout = "~/Views/Shared/_LayoutPanel.cshtml";
}

<h2 class="display-2">Create page</h2>



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-group">
        <hr />
        <div id="msg"></div>
        <input type="file" name="HeadImage" hidden class="file" accept="image/*">
        <div class="input-group my-3">
            <input type="text" class="form-control" disabled placeholder="Click browse to upload image" id="file">
            <div class="input-group-append">
                <button type="button" class="browse btn btn-primary">Browse...</button>
            </div>
        </div>
        <div class="ml-2 col-md-10">
            <img src="https://placehold.it/80x80" id="previewImage" class="d-none w-100 h-25">
        </div>
        @Html.HiddenFor(model => model.HeadImageBase64)
        @Html.ValidationMessageFor(model => model.HeadImageBase64, "", new { @class = "text-danger" })
    </div>

    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.Author, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Author, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Author, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <label for="Content">Content</label>
            <textarea name="Content"></textarea>
            @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-primary" id="createBtn" />
        </div>
    </div>
}

<div id="modalContainer"></div>

<div>
    <form action="/Admin/PostsView/">
        <input type="submit" class="btn btn-outline-dark" value="Back to list" />
    </form>
</div>

@section Scripts{
    <script>

        $(document).ready(function () {
            CKEDITOR.replace('Content');
            CKEDITOR.replace('ContentPreview');


            CKEDITOR.instances.ContentPreview.editorConfig = function (config) {
                config.toolbarGroups = [
                    { name: 'document', groups: ['mode', 'document', 'doctools'] },
                    { name: 'clipboard', groups: ['clipboard', 'undo'] },
                    { name: 'editing', groups: ['find', 'selection', 'spellchecker', 'editing'] },
                    { name: 'forms', groups: ['forms'] },
                    '/',
                    { name: 'basicstyles', groups: ['basicstyles', 'cleanup'] },
                    { name: 'paragraph', groups: ['list', 'indent', 'blocks', 'align', 'bidi', 'paragraph'] },
                    { name: 'links', groups: ['links'] },
                    { name: 'insert', groups: ['insert'] },
                    '/',
                    { name: 'styles', groups: ['styles'] },
                    { name: 'colors', groups: ['colors'] },
                    { name: 'tools', groups: ['tools'] },
                    { name: 'others', groups: ['others'] },
                    { name: 'about', groups: ['about'] }
                ];

                config.removeButtons = 'Source,Save,NewPage,Preview,Print,Templates,Form,Button,Select,Radio,Checkbox,Image,Table,PageBreak,Iframe,ImageButton,Maximize,About,Flash';
            };

            $('.datepicker').datepicker({
                uiLibrary: 'bootstrap4',
                format: 'dd.mm.yyyy'
            });

            $('.datepicker').change(function () {
                $('#Livetime').val($('#datePicker').val());
            });
            //$("#datepicker").datepicker("option", "dateFormat", 'yy-mm-dd');


            //$('#sandbox-container .input-group.date').pickadate({
            //    todayHighlight: true
            //});

            
            $("#createBtn").click(function () {
                if ($("#Title").val() === "" || $("#Content").val() === "") {
                    alert("Field's can not be empty !");
                    return;
                }
            });


            $(document).on("click", ".browse", function () {
                var file = $(this).parents().find(".file");
                file.trigger("click");
            });

            $('input[type="file"]').change(function (e) {
                if (e.target.files[0] == undefined) { return }
                var fileName = e.target.files[0].name;
                $("#file").val(fileName);

                var reader = new FileReader();
                reader.onload = function (e) {
                    // get loaded data and render thumbnail.
                    $('#HeadImageBase64').val(reader.result);
                    $('#previewImage').removeClass('d-none');
                    document.getElementById("previewImage").src = e.target.result;

                };
                // read the image file as a data URL.
                reader.readAsDataURL(this.files[0]);
            });
        });
    </script>

    @Scripts.Render("~/bundles/jqueryval")
}